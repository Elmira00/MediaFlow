// <auto-generated />
using System;
using MediaFlow.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediaFlow.DataAccess.Migrations
{
    [DbContext(typeof(MediaFlowDbContext))]
    partial class MediaFlowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MediaFlow.Entities.Models.Analytics", b =>
                {
                    b.Property<int>("AnalyticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnalyticsId"));

                    b.Property<int>("Comments")
                        .HasColumnType("int");

                    b.Property<int?>("ContentPostPostId")
                        .HasColumnType("int");

                    b.Property<double>("EngagementRate")
                        .HasColumnType("float");

                    b.Property<int>("Impressions")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("Shares")
                        .HasColumnType("int");

                    b.HasKey("AnalyticsId");

                    b.HasIndex("ContentPostPostId");

                    b.HasIndex("PlatformId");

                    b.ToTable("Analytics");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.ContentPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<int>("PostTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("PostTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ContentPosts");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.PostHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<int?>("ContentPostPostId")
                        .HasColumnType("int");

                    b.Property<string>("PlatformResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HistoryId");

                    b.HasIndex("ContentPostPostId");

                    b.ToTable("PostHistories");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.PostType", b =>
                {
                    b.Property<int>("PostTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostTypeId"));

                    b.Property<string>("TypePlatformName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostTypeId");

                    b.ToTable("PostTypes");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.ScheduledPost", b =>
                {
                    b.Property<int>("ScheduledPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduledPostId"));

                    b.Property<int?>("ContentPostPostId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("RecurrencePattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduledPostId");

                    b.HasIndex("ContentPostPostId");

                    b.ToTable("ScheduledPosts");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.SocialMediaPlatform", b =>
                {
                    b.Property<int>("PlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlatformId"));

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatformPlatformName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlatformId");

                    b.ToTable("SocialMediaPlatforms");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.UserSocialMediaAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSocialMediaAccounts");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.Analytics", b =>
                {
                    b.HasOne("MediaFlow.Entities.Models.ContentPost", "ContentPost")
                        .WithMany("Analytics")
                        .HasForeignKey("ContentPostPostId");

                    b.HasOne("MediaFlow.Entities.Models.SocialMediaPlatform", "Platform")
                        .WithMany("Analytics")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentPost");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.ContentPost", b =>
                {
                    b.HasOne("MediaFlow.Entities.Models.SocialMediaPlatform", "Platform")
                        .WithMany("ContentPosts")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaFlow.Entities.Models.PostType", "PostType")
                        .WithMany("ContentPosts")
                        .HasForeignKey("PostTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaFlow.Entities.Models.User", "User")
                        .WithMany("ContentPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");

                    b.Navigation("PostType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.Notification", b =>
                {
                    b.HasOne("MediaFlow.Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.PostHistory", b =>
                {
                    b.HasOne("MediaFlow.Entities.Models.ContentPost", "ContentPost")
                        .WithMany("PostHistories")
                        .HasForeignKey("ContentPostPostId");

                    b.Navigation("ContentPost");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.ScheduledPost", b =>
                {
                    b.HasOne("MediaFlow.Entities.Models.ContentPost", "ContentPost")
                        .WithMany("ScheduledPosts")
                        .HasForeignKey("ContentPostPostId");

                    b.Navigation("ContentPost");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.UserSocialMediaAccount", b =>
                {
                    b.HasOne("MediaFlow.Entities.Models.SocialMediaPlatform", "Platform")
                        .WithMany("UserAccounts")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaFlow.Entities.Models.User", "User")
                        .WithMany("SocialMediaAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.ContentPost", b =>
                {
                    b.Navigation("Analytics");

                    b.Navigation("PostHistories");

                    b.Navigation("ScheduledPosts");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.PostType", b =>
                {
                    b.Navigation("ContentPosts");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.SocialMediaPlatform", b =>
                {
                    b.Navigation("Analytics");

                    b.Navigation("ContentPosts");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("MediaFlow.Entities.Models.User", b =>
                {
                    b.Navigation("ContentPosts");

                    b.Navigation("SocialMediaAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
